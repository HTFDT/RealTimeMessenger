// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240316170313_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DefaultMemberRoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<long>("LastMessageNum")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.GroupRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasComputedColumnSql("UPPER(\"Name\")", true);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("GroupRights", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.GroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAssignableByUsers")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefaultKickedRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefaultLeftRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefaultMemberRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefaultOwnerRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevocable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasComputedColumnSql("UPPER(\"Name\")", true);

                    b.HasKey("Id");

                    b.HasIndex("IsDefaultKickedRole")
                        .IsUnique()
                        .HasFilter("\"IsDefaultKickedRole\" = true");

                    b.HasIndex("IsDefaultLeftRole")
                        .IsUnique()
                        .HasFilter("\"IsDefaultLeftRole\" = true");

                    b.HasIndex("IsDefaultMemberRole")
                        .IsUnique()
                        .HasFilter("\"IsDefaultMemberRole\" = true");

                    b.HasIndex("IsDefaultOwnerRole")
                        .IsUnique()
                        .HasFilter("\"IsDefaultOwnerRole\" = true");

                    b.HasIndex("GroupId", "NormalizedName")
                        .IsUnique();

                    b.ToTable("GroupRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateKicked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupRoleBeforeLeaveId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupRoleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsKicked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRoleUnique")
                        .HasColumnType("boolean");

                    b.Property<long>("LastMessageNumberWhenJoined")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupRoleBeforeLeaveId");

                    b.HasIndex("UserId", "GroupId")
                        .IsUnique();

                    b.HasIndex("GroupRoleId", "GroupId", "IsRoleUnique")
                        .IsUnique()
                        .HasFilter("\"IsRoleUnique\" = true");

                    b.ToTable("Memberships", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEdited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<long?>("GroupNumber")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReplyTo")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("GroupId", "GroupNumber")
                        .IsUnique();

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasComputedColumnSql("UPPER(\"Name\")", true);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("GroupRightGroupRole", b =>
                {
                    b.Property<Guid>("GroupRightsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupRolesId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupRightsId", "GroupRolesId");

                    b.HasIndex("GroupRolesId");

                    b.ToTable("GroupRightGroupRole");
                });

            modelBuilder.Entity("GroupTag", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("GroupTag");
                });

            modelBuilder.Entity("Domain.Entities.GroupRole", b =>
                {
                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Domain.Entities.Membership", b =>
                {
                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("Memberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GroupRole", "GroupRoleBeforeLeave")
                        .WithMany("MembershipsWithThisRoleBeforeLeave")
                        .HasForeignKey("GroupRoleBeforeLeaveId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.GroupRole", "GroupRole")
                        .WithMany("Memberships")
                        .HasForeignKey("GroupRoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Group");

                    b.Navigation("GroupRole");

                    b.Navigation("GroupRoleBeforeLeave");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("Messages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Membership", "Membership")
                        .WithMany("Messages")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("GroupRightGroupRole", b =>
                {
                    b.HasOne("Domain.Entities.GroupRight", null)
                        .WithMany()
                        .HasForeignKey("GroupRightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GroupRole", null)
                        .WithMany()
                        .HasForeignKey("GroupRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupTag", b =>
                {
                    b.HasOne("Domain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupRoles");

                    b.Navigation("Memberships");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Entities.GroupRole", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("MembershipsWithThisRoleBeforeLeave");
                });

            modelBuilder.Entity("Domain.Entities.Membership", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
